services:
  # === INFRASTRUCTURE SERVICES ===
  postgres:
    image: postgres:17
    container_name: planbookai-postgres-dev
    environment:
      POSTGRES_DB: planbookai
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d planbookai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - planbookai-network

  # === DATABASE MIGRATION SERVICE ===
  db-migration:
    image: postgres:17
    container_name: planbookai-db-migration
    environment:
      POSTGRES_DB: planbookai
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test123
      PGHOST: postgres
      PGPORT: 5432
    volumes:
      - ../scripts:/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        until pg_isready -h postgres -p 5432 -U test; do
          echo 'Database not ready, waiting...'
          sleep 2
        done &&
        echo 'Database is ready. Running migration...' &&
        psql -h postgres -U test -d planbookai -f /scripts/bpa.sql &&
        echo 'Migration completed successfully!'
      "
    networks:
      - planbookai-network
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: planbookai_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: planbookai2024
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"      # AMQP protocol
      - "15672:15672"    # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - planbookai-network
  # === APPLICATION SERVICES ===
  authservice:
    image: ${DOCKER_REGISTRY-}authservice
    build:
      context: AuthService
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - planbookai-network
  gatewayservice:
    image: ${DOCKER_REGISTRY-}gatewayservice
    build:
      context: GatewayService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      authservice:
        condition: service_started
    networks:
      - planbookai-network
  planservice:
    image: ${DOCKER_REGISTRY-}planservice
    build:
      context: PlanService
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - planbookai-network
  userservice:
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: UserService
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - planbookai-network
  examservice:
    image: ${DOCKER_REGISTRY-}examservice
    build:
      context: ExamService
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - planbookai-network
  classroomservice:
    image: ${DOCKER_REGISTRY-}classroomservice
    build:
      context: ClassroomService
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - planbookai-network
  filestorageservice:
    image: ${DOCKER_REGISTRY-}filestorageservice
    build:
      context: FileStorageService
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - planbookai-network
  notificationservice:
    image: ${DOCKER_REGISTRY-}notificationservice
    build:
      context: NotificationService
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - planbookai-network
  studentgradingservice:
    image: ${DOCKER_REGISTRY-}studentgradingservice
    build:
      context: StudentGradingService
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - planbookai-network
  logservice:
    image: ${DOCKER_REGISTRY-}logservice
    build:
      context: LogService
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - planbookai-network
volumes:
  rabbitmq_data:
  postgres_data:
networks:
  planbookai-network:
    driver: bridge
